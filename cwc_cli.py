from argparse import ArgumentParser

def run():
    args = ArgumentParser(prog="cwc",description="Character Word Cloud")
    args.add_argument("--text",type=str,help="指定生成词云的文本文件")
    args.add_argument("--regex",type=str,help="override the regular expression defining what constitutes a word")
    args.add_argument("--stopwords",type=str,help="指定停用词文件(一行一个词)")
    args.add_argument("--imagefile",type=str,help="file the completed PNG image should be written to (default: stdout)")
    args.add_argument("--fontfile",type=str,help="path to font file you wish to use (default: DroidSansMono)")
    args.add_argument("--mask",type=str,help="mask to use for the image form")
    args.add_argument("--colormask",type=str,help="color mask to use for the image form")
    args.add_argument("--contour_width",type=int,default=0,help="if greater than 0, draw mask contour (default: 0)")
    args.add_argument("--contour_color",type=str,default="black",help="use given color as mask contour color - accepts any value from PIL.ImageColor.getcolor")
    args.add_argument("--relative_scaling",type=int,default=0,help="scaling of words by frequency (0 - 1)")
    args.add_argument("--margin",type=int,default=2,help="spacing to leave around words")
    args.add_argument("--width",type=int,default=400,help="输出图片的宽度")
    args.add_argument("--height",type=int,default=200,help="输出文件的高度")
    args.add_argument("--color",type=str,help="使用给定颜色作为图片颜色,支持PIL.ImageColor.getcolor")
    args.add_argument("--background",type=str,default="black",help="使用给定颜色作为背景颜色,支持PIL.ImageColor.getcolor")
    args.add_argument("--collocations",action="store_true",help="add collocations (bigrams) to word cloud (default: add unigrams and bigrams)")
    args.add_argument("--include_numbers",action="store_false",help="词云中是否包含数字")
    args.add_argument("--min_word_length",type=int,default=0,help="only include words with more than X letters")
    args.add_argument("--prefer_horizontal",type=float,default=0.9,help="ratio of times to try horizontal fitting as opposed to vertical")
    args.add_argument("--scale",type=float,default=1,help="scaling between computation and drawing")
    args.add_argument("--corlormap",type=str,default="viridis",help="matplotlib colormap name")
    args.add_argument("--mode",type=str,default="RGB",help="use RGB or RGBA for transparent background")
    args.add_argument("--max_words",type=int,default=200,help="maximum number of words")
    args.add_argument("--min_font_size",type=int,default=4,help="smallest font size to use")
    args.add_argument("--max_font_size",type=int,help="maximum font size for the largest word")
    args.add_argument("--font_step",type=int,default=1, help="step size for the font")
    args.add_argument("--random_state",type=int,help="seed for the random number generator")
    args.add_argument("--normalize_plurals",action="store_true",help="是否移除英文单词结尾的复数s")
    args.add_argument("--repeat",action="store_false", help="是否重复字词和短语")
    args.add_argument("--version",help="显示程序版本号并退出")
    args.parse_args()


if __name__ == '__main__':
    run()
